import os
import json
from tqdm import tqdm
from dotenv import load_dotenv
import chromadb
from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction
from pymongo import MongoClient

# Load API Key v√† Mongo URI t·ª´ .env
load_dotenv()
openai_key = os.getenv("OPENAI_API_KEY")
mongo_uri = os.getenv("MONGO_URI")

if not openai_key:
    raise Exception("Kh√¥ng t√¨m th·∫•y OPENAI_API_KEY trong file .env!")

if not mongo_uri:
    raise Exception("Kh√¥ng t√¨m th·∫•y MONGO_URI trong file .env!")

# T·∫°o embedding function
embedding_function = OpenAIEmbeddingFunction(
    api_key=openai_key,
    model_name="text-embedding-3-small"
)

# K·∫øt n·ªëi Chroma vectorstore
chroma_client = chromadb.PersistentClient(path="chroma")
collection = chroma_client.get_or_create_collection(
    name="quychesinhvien5tot_data",
    embedding_function=embedding_function
)

# K·∫øt n·ªëi MongoDB
mongo_client = MongoClient(mongo_uri)
mongo_db = mongo_client["quychesinhvien5tot_data"]  # t√™n database
mongo_collection = mongo_db["documents"]   # t√™n collection

data_dir = 'chunked'
doc_id = 0
documents = []
ids = []
metadatas = []
mongo_docs = []

if not os.path.exists(data_dir):
    raise Exception(f"Th∆∞ m·ª•c {data_dir} kh√¥ng t·ªìn t·∫°i!")

for filename in os.listdir(data_dir):
    if filename.endswith(".json"):
        filepath = os.path.join(data_dir, filename)
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                chunks = json.load(f)
                if isinstance(chunks, str):
                    chunks = [json.loads(chunk) for chunk in chunks]
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc {filename}: {e}")
            continue

        for chunk in tqdm(chunks, desc=f"Embedding {filename}"):
            try:
                content = json.dumps(chunk, ensure_ascii=False) if isinstance(chunk, dict) else str(chunk)
                
                # L∆∞u cho Chroma
                documents.append(content)
                ids.append(f"doc_{doc_id}")
                metadatas.append({"filename": filename})

                # Chu·∫©n b·ªã cho MongoDB
                mongo_docs.append({
                    "doc_id": f"doc_{doc_id}",
                    "content": content,
                    "metadata": {"filename": filename}
                })

                doc_id += 1
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ƒëo·∫°n trong {filename}: {e}")

# B∆∞·ªõc 6: Th√™m d·ªØ li·ªáu v√†o Chroma
if documents:
    try:
        collection.upsert(
            documents=documents,
            ids=ids,
            metadatas=metadatas
        )
        print(f"\n‚úÖ ƒê√£ th√™m {doc_id} documents v√†o collection 'taovector'.")
    except Exception as e:
        print(f"‚ùå L·ªói khi th√™m d·ªØ li·ªáu v√†o collection Chroma: {e}")

# B∆∞·ªõc 7: Th√™m d·ªØ li·ªáu v√†o MongoDB
if mongo_docs:
    try:
        mongo_collection.insert_many(mongo_docs)
        print(f"‚úÖ ƒê√£ th√™m {len(mongo_docs)} documents v√†o MongoDB collection 'documents'.")
    except Exception as e:
        print(f"‚ùå L·ªói khi th√™m d·ªØ li·ªáu v√†o MongoDB: {e}")

# Ki·ªÉm tra
print(f"üìä S·ªë l∆∞·ª£ng t√†i li·ªáu trong Chroma: {collection.count()}")
print(f"üìä S·ªë l∆∞·ª£ng t√†i li·ªáu trong MongoDB: {mongo_collection.count_documents({})}")
